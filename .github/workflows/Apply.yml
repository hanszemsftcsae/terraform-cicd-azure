# This workflow installs the latest version of Terraform CLI 

name: 'Init Terraform - Login to Az'

on:
  workflow_dispatch 
  
#  push:
#    branches: [ "main" ]
#  pull_request:

# Important to set id-token: write permission for OpenId use of actions
permissions:
  contents: read
  id-token: write
  

jobs:
  terraform:
    name: 'Terraform'
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        azapi_version: ['latest', '1.4.0']
        azurerm_version: ['latest', '3.7.0']
        terraform_version: ['latest', '1.3.0']
        
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      
    steps:
    # Show the environment values
    - name: Show env
      run: env | sort

    # Login to Azure using AzPowershell and OIDC
#    - name: Azure login using OIDC
#      uses: azure/login@v1
#      with:
#        client-id: ${{ secrets.ARM_CLIENT_ID }}
#        tenant-id: ${{ secrets.ARM_TENANT_ID }}
#        subscription-id:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
#        enable-AzPSSession: true
#        #allow-no-subscriptions: true

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

    # Test that we can access Azure Resources
    - name: 'Get Resource Groups in Subscription'
      uses: azure/powershell@v1
      with:
        inlineScript: |
          Get-AzResourceGroup
          azPSVersion: "latest"

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ matrix.terraform_version }}
        terraform_wrapper: false
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Validate 
    - name: Terraform Validate
      run: terraform validate
        
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
